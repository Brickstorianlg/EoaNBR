#Demographics
	eoanbr_pops_state_increase_culture = {
		#Input: type_temp (temp, integer), percentage_temp (temp, positive)
		#Adds a % of support to a culture, then normalizes & sorts it

		#Technical: Looks through the culture array, finds the index with the same culture type, adds the percentage.
		#						If the culture isn't there, then it adds it. Finally, it calls the normalize scripted effect
		if = {
			limit = {
				check_variable = { type_temp > 0 }
				check_variable = { percentage_temp > 0 }
			}
			custom_effect_tooltip = eoanbr_pops_state_increase_culture_tt

			for_each_loop = {
				array = pops_culture_array
				value = cc
				break = bb

				if = {
					limit = {
						check_variable = { cc = type_temp }
					}
					add_to_variable = { percentage@var:cc = percentage_temp }

					set_temp_variable = { bb = 1 }
				}
			}
			if = {
				limit = {
					NOT = { check_variable = { bb = 1 } }
				}
				add_to_array = { pops_culture_array = type_temp }
				set_variable = { percentage@var:cc = percentage_temp }
				#add_to_array = { pops_culture_amount = 0 }
			}
			clear_variable = type_temp
			clear_variable = percentage_temp
			eoanbr_pops_state_normalize_culture = yes
		}
	}
	eoanbr_pops_state_decrease_culture = {
		#Input: type_temp (temp, integer), percentage_temp (temp, positive)
		#Subtracts a % of support from a culture, then normalizes & sorts it

		#Technical: Looks through the culture array, finds the index with the same culture type, subtracts the percentage.
		#						If the culture isn't there, nothing happens. If the support becomes 0 or negative, it is removed.
		#						Finally, it calls the normalize scripted effect

		if = {
			limit = {
				check_variable = { type_temp > 0 }
				check_variable = { percentage_temp > 0 }
			}
			custom_effect_tooltip = eoanbr_pops_state_decrease_culture_tt

			for_each_loop = {
				array = pops_culture_array
				value = cc
				break = bb

				if = {
					limit = {
						check_variable = { cc = type_temp }
					}
					subtract_from_variable = { ppercentage@var:cc = percentage_temp }

					set_temp_variable = { bb = 1 }
				}
			}
			if = {
				limit = {
					check_variable = { bb = 1 }
					NOT = { check_variable = { percentage@var:cc > 0 } }
				}
				remove_from_array = {
					array = pops_culture_array
					value = cc
				}
				clear_variable = percentage@var:cc
				clear_variable = population_k@var:cc
			}
			clear_variable = type_temp
			clear_variable = percentage_temp
			eoanbr_pops_state_normalize_culture = yes
		}
	}
	eoanbr_pops_state_normalize_culture = {
		#Get the total percentage
		set_temp_variable = { total_percentage_temp = 0 }
		for_each_loop = {
			array = pops_culture_array
			value = cc

			add_to_variable = { percentage@var:cc = 0.001 }
			add_to_temp_variable = { total_percentage_temp = percentage@var:cc }
		}
		if = {
			limit = {
				#If the total percentage !=1, then normalize it
				#If it does equal one, then there's no need to
				NOT = { check_variable = { total_percentage_temp = 1 } }
			}

			#Normalize, then get total percentage
			set_temp_variable = { total_percentage_2_temp = 0 }
			for_each_loop = {
				array = pops_culture_array
				index = rr

				divide_variable = { percentage@var:cc = total_percentage_temp }
				add_to_temp_variable = { total_percentage_2_temp = percentage@var:cc }
			}

			if = {
				limit = {
				#If the total percentage still !=1, then adjust the largest to fit
				#If it does equal one, then there's no need to
					NOT = { check_variable = { total_percentage_2_temp = 1 } }
				}

				#Adjust largest culture
				set_temp_variable = { adjust_temp = 1 }
				subtract_from_temp_variable = { adjust_temp = total_percentage_2_temp }
				set_temp_variable = { largest_culture_temp = pops_culture_array^0 }
				add_to_variable = { percentage@var:largest_culture_temp = adjust_temp }
			}

			eoanbr_pops_state_sort_culture = yes #Sorts it and also sets the amount correctly
		}
	}
	eoanbr_pops_state_sort_culture = {
		clear_variable = state_primary_culture_population_k
		clear_variable = state_promoted_culture_population_k
		clear_variable = state_normal_culture_population_k
		clear_variable = state_marginalized_culture_population_k

		#Note: First index is the largest, last index is the smallest
		add_to_temp_array = { pops_culture_temp = pops_culture_array^0 }

		#I don't sort amount b/c it's unnecessary as it gets set at the end

		for_loop_effect = {
			start = 1
			end = pops_culture_array^num
			value = cc

			if = {
				limit = {
					check_variable = { percentage@var:cc > 0 }
				}
				for_each_loop = {
					array = pops_culture_array_temp
					value = ccc
					index = iii
					break = bbb
					if = {
						limit = {
							check_variable = { percentage@var:ccc < percentage@var:cc }
						}
						add_to_array = {
							array = pops_culture_array_temp
							value = ccc
							index = iii
						}
						set_temp_variable = { bbb = 1 }
					}
				}
			}
			else = {
				clear_variable = percentage@var:cc
				clear_variable = population_k@var:cc
			}
		}

		#Reinsert the data into the actual arrays
		clear_array = pops_culture_array
		for_each_loop = {
			array = pops_culture_array_temp
			value = cc
			add_to_array = {
				array = pops_culture_array
				value = cc
			}
			set_variable = {
				var = population_k@var:cc
				value = percentage@var:cc
			}
			multiply_variable = {
				var = population_k@var:cc
				value = state_population_k
			}
			if = {
				limit = {
					set_temp_variable = { culture_temp = cc }
					is_owner_primary_culture = yes
				}
				add_to_variable = {
					var = state_primary_culture_population_k
					value = population_k@var:cc
				}
			}
			else_if = {
				limit = {
					set_temp_variable = { culture_temp = cc }
					is_promoted_primary_culture = yes
				}
				add_to_variable = {
					var = state_promoted_culture_population_k
					value = population_k@var:cc
				}
			}
			else_if = {
				limit = {
					set_temp_variable = { culture_temp = cc }
					is_owner_marginalized_culture = yes
				}
				add_to_variable = {
					var = state_marginalized_culture_population_k
					value = population_k@var:cc
				}
			}
			else = {
				add_to_variable = {
					var = state_normal_culture_population_k
					value = population_k@var:cc
				}
			}
		}

		clear_array = pops_culture_array_temp

		#pops_update_culture_amount = yes #Update the culture amount
	}
	eoanbr_pops_state_increase_religion = {
		#Input: type_temp (temp, integer), percentage_temp (temp, positive)
		#Adds a % of support to a religion, then normalizes & sorts it

		#Technical: Looks through the religion array, finds the index with the same religion type, adds the percentage.
		#						If the religion isn't there, then it adds it. Finally, it calls the normalize scripted effect
		if = {
			limit = {
				check_variable = { type_temp > 0 }
				check_variable = { percentage_temp > 0 }
			}
			custom_effect_tooltip = eoanbr_pops_state_increase_religion_tt

			for_each_loop = {
				array = pops_religion_array
				value = rr
				break = bb

				if = {
					limit = {
						check_variable = { rr = type_temp }
					}
					add_to_variable = { percentage@var:rr = percentage_temp }

					set_temp_variable = { bb = 1 }
				}
			}
			if = {
				limit = {
					NOT = { check_variable = { bb = 1 } }
				}
				add_to_array = { pops_religion_array = type_temp }
				set_variable = { percentage@var:rr = percentage_temp }
				#add_to_array = { pops_religion_amount = 0 }
			}
			clear_variable = type_temp
			clear_variable = percentage_temp
			eoanbr_pops_state_normalize_religion = yes
		}
	}
	eoanbr_pops_state_decrease_religion = {
		#Input: type_temp (temp, integer), percentage_temp (temp, positive)
		#Subtracts a % of support from a religion, then normalizes & sorts it

		#Technical: Looks through the religion array, finds the index with the same religion type, subtracts the percentage.
		#						If the religion isn't there, nothing happens. If the support becomes 0 or negative, it is removed.
		#						Finally, it calls the normalize scripted effect

		if = {
			limit = {
				check_variable = { type_temp > 0 }
				check_variable = { percentage_temp > 0 }
			}
			custom_effect_tooltip = eoanbr_pops_state_decrease_religion_tt

			for_each_loop = {
				array = pops_religion_array
				value = rr
				break = bb

				if = {
					limit = {
						check_variable = { rr = type_temp }
					}
					subtract_from_variable = { ppercentage@var:rr = percentage_temp }

					set_temp_variable = { bb = 1 }
				}
			}
			if = {
				limit = {
					check_variable = { bb = 1 }
					NOT = { check_variable = { percentage@var:rr > 0 } }
				}
				remove_from_array = {
					array = pops_religion_array
					value = rr
				}
				clear_variable = percentage@var:rr
				clear_variable = population_k@var:rr
			}
			clear_variable = type_temp
			clear_variable = percentage_temp
			eoanbr_pops_state_normalize_religion = yes
		}
	}
	eoanbr_pops_state_normalize_religion = {
		#Get the total percentage
		set_temp_variable = { total_percentage_temp = 0 }
		for_each_loop = {
			array = pops_religion_array
			value = rr

			add_to_variable = { percentage@var:rr = 0.001 }
			add_to_temp_variable = { total_percentage_temp = percentage@var:rr }
		}
		if = {
			limit = {
				#If the total percentage !=1, then normalize it
				#If it does equal one, then there's no need to
				NOT = { check_variable = { total_percentage_temp = 1 } }
			}

			#Normalize, then get total percentage
			set_temp_variable = { total_percentage_2_temp = 0 }
			for_each_loop = {
				array = pops_religion_array
				index = rr

				divide_variable = { percentage@var:rr = total_percentage_temp }
				add_to_temp_variable = { total_percentage_2_temp = percentage@var:rr }
			}

			if = {
				limit = {
				#If the total percentage still !=1, then adjust the largest to fit
				#If it does equal one, then there's no need to
					NOT = { check_variable = { total_percentage_2_temp = 1 } }
				}

				#Adjust largest religion
				set_temp_variable = { adjust_temp = 1 }
				subtract_from_temp_variable = { adjust_temp = total_percentage_2_temp }
				set_temp_variable = { largest_religion_temp = pops_religion_array^0 }
				add_to_variable = { percentage@var:largest_religion_temp = adjust_temp }
			}

			eoanbr_pops_state_sort_religion = yes #Sorts it and also sets the amount correctly
		}
	}
	eoanbr_pops_state_sort_religion = {
		clear_variable = population_k@token:religion_primary
		clear_variable = population_k@token:religion_promoted
		clear_variable = state_normal_religion_population_k
		clear_variable = state_marginalized_religion_population_k

		#Note: First index is the largest, last index is the smallest
		add_to_temp_array = { pops_religion_temp = pops_religion_array^0 }

		#I don't sort amount b/c it's unnecessary as it gets set at the end

		for_loop_effect = {
			start = 1
			end = pops_religion_array^num
			value = rr

			if = {
				limit = {
					check_variable = { percentage@var:rr > 0 }
				}
				for_each_loop = {
					array = pops_religion_array_temp
					value = rrc
					index = iii
					break = bbb
					if = {
						limit = {
							check_variable = { percentage@var:rrc < percentage@var:rr }
						}
						add_to_array = {
							array = pops_religion_array_temp
							value = rrc
							index = iii
						}
						set_temp_variable = { bbb = 1 }
					}
				}
			}
			else = {
				clear_variable = percentage@var:rr
				clear_variable = population_k@var:rr
			}
		}

		#Reinsert the data into the actual arrays
		clear_array = pops_religion_array
		for_each_loop = {
			array = pops_religion_array_temp
			value = rr
			add_to_array = {
				array = pops_religion_array
				value = rr
			}
			set_variable = {
				var = population_k@var:rr
				value = percentage@var:rr
			}
			multiply_variable = {
				var = population_k@var:rr
				value = state_population_k
			}
			if = {
				limit = {
					set_temp_variable = { religion_temp = rr }
					is_owner_primary_religion = yes
				}
				add_to_variable = {
					var = population_k@token:religion_primary
					value = population_k@var:rr
				}
			}
			else_if = {
				limit = {
					set_temp_variable = { religion_temp = rr }
					is_promoted_primary_religion = yes
				}
				add_to_variable = {
					var = population_k@token:religion_promoted
					value = population_k@var:rr
				}
			}
			else_if = {
				limit = {
					set_temp_variable = { religion_temp = rr }
					is_owner_marginalized_religion = yes
				}
				add_to_variable = {
					var = state_marginalized_religion_population_k
					value = population_k@var:rr
				}
			}
			else = {
				add_to_variable = {
					var = state_normal_religion_population_k
					value = population_k@var:rr
				}
			}
		}

		clear_array = pops_religion_array_temp
	}
#