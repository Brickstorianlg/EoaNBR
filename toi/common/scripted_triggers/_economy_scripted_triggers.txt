
#is_in_japan = {
#	custom_trigger_tooltip = {
#		tooltip = eoanb_is_in_japan_tt
#		OR = {
#			state = 282
#			#... so on
#		}
#	}
#}

return_latest_production_method = {
	# building_token
	# State Scope
	# Returns pm_temp
	# Returns a temporary variable which has the latest production method available (as the number) and returns -1 if not available
	
	set_temp_variable = { pm_temp = -1 }

	#Checks latest first
	if = {
		limit = {
			OR = {
				check_variable = { global.building_futurized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_futurized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_futurized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 11 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_automatized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_automatized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_automatized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 10 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_digitalized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_digitalized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_digitalized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 9 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_computerized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_computerized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_computerized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 8 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_roboticized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_roboticized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_roboticized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 7 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_modernized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_modernized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_modernized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 6 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_motorized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_motorized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_motorized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 5 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_electrified_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_electrified_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_electrified_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 4 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_mechanized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_mechanized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_mechanized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 3 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_industrialized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_industrialized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_industrialized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 2 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_advanced_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_advanced_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_advanced_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 1 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_basic_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_basic_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_basic_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 0 }
	}
}
return_earliest_production_method = {
	# building_token
	# State Scope
	# Returns pm_temp
	# Returns a temporary variable which has the earliest production method available (as the number) and returns -1 if not available
	
	set_temp_variable = { pm_temp = -1 }

	#Checks earliest first
	if = {
		limit = {
			OR = {
				check_variable = { global.building_basic_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_basic_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_basic_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 0 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_advanced_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_advanced_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_advanced_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 1 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_industrialized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_industrialized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_industrialized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 2 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_mechanized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_mechanized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_mechanized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 3 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_electrified_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_electrified_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_electrified_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 4 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_motorized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_motorized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_motorized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 5 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_modernized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_modernized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_modernized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 6 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_roboticized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_roboticized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_roboticized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 7 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_computerized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_computerized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_computerized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 8 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_digitalized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_digitalized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_digitalized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 9 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_automatized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_automatized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_automatized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 10 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_futurized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_futurized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_futurized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 11 }
	}
}

is_valid_production_method = {
	# pm_temp, building_token
	# State Scope

	set_temp_variable = { testing_pm_temp = pm_temp }
	return_latest_production_method = yes
	NOT = { check_variable = { pm_temp = -1 } }
	check_variable = { testing_pm_temp < pm_temp }
	
	return_earliest_production_method = yes
	NOT = { check_variable = { pm_temp = -1 } }
	check_variable = { testing_pm_temp > pm_temp }
}
has_valid_production_method = {
	# building_token
	# State Scope

	return_latest_production_method = yes
	NOT = { check_variable = { pm_temp = -1 } }

	return_earliest_production_method = yes
	NOT = { check_variable = { pm_temp = -1 } }
}

can_establish_new_route = {
	#Checks if you can create a new trade route with ANYONE
	# resource_temp - resource token
	# trade_type_temp - 1 = Import, -1 = Export

	#Checks the following:
	# Can Trade
	# Resource is valid
	# trade type is set correctly
	# local Supply/Demand check depending on trade type

	can_trade = yes

	OR = {
		is_in_array = { global.resource_token_array = resource_temp }
		is_in_array = { global.military_resource_token_array = resource_temp }
	}
	OR = {
		check_variable = { trade_type_temp = 1 }
		check_variable = { trade_type_temp = -1 }
	}
	if = {
		limit = {
			check_variable = { trade_type_temp = -1 }
		}
		if = {
			limit = {
				is_in_array = { global.military_resource_token_array = resource_temp }
			}
			NOT = { check_variable = { supply@var:resource_temp < global.shipping_amount@var:resource_temp } }
		}
		else = {
			check_variable = { supply@var:resource_temp > 0 }
		}
	}
}
can_trade = {
	#Checks if you can trade with ANYONE

	#Checks the following:
	# Uses Eco System (AKA doesn't use african tribal mechanics)
	# Is not a rebel country (rebel_uprising flag)
	# Doesn't have trade restricted (trade_restricted flag)

	NOT = { has_variable = has_afr_empire_mechanic_system }
	NOT = { has_country_flag = rebel_uprising }
	NOT = { has_country_flag = trade_restricted }
}
can_trade_by_sea = {
	#Checks if you can trade with ANYONE by sea
	# THIS DOES NOT CHECK IF YOU CAN TRADE IN GENERAL. USE CAN_TRADE FOR THAT.

	#Checks the following:
	# Is coastal
	# Not Blockaded
	
	any_controlled_state = {
		OR = {
			is_coastal = yes
			has_state_flag = internationally_navigable_river
		}
	}
	NOT = { has_country_flag = blockaded }
}
can_establish_new_route_with = {
	#Checks if you can establish a new route with the given country
	# resource_temp - resource token
	# country_temp - country to trade with
	# trade_type_temp - 1 = Import, -1 = Export

	#Checks the following:
	# Can trade with country
	# Can establish new route
	# Foreign Supply/Demand check depending on trade type
	# Doesn't have route already established
	
	can_trade_with = yes
	can_establish_new_route = yes

	if = {
		limit = {
			check_variable = { trade_type_temp = 1 }
		}
		if = {
			limit = {
				is_in_array = { global.military_resource_token_array = resource_temp }
			}
			NOT = { check_variable = { country_temp:supply@var:resource_temp < global.shipping_amount@var:resource_temp } }
		}
		else = {
			check_variable = { country_temp:supply@var:resource_temp > 0 }
		}
	}
	
	NOT = { has_trade_route_with = yes }
}
can_trade_with = {
	#Checks if you can trade with the given country
	# country_temp - country to trade with

	#Checks the following:
	# Can Trade
	# Country exists
	# Not this country
	# Not at war with country
	# Not embargoing each other
	# Other Country Can Trade
	# Either neighbors or coastal
	# If not neighbors, then neither under blockade

	can_trade = yes
	country_exists = var:country_temp
	NOT = { tag = var:country_temp }
	NOT = { has_war_with = var:country_temp }
	NOT = { var:country_temp = { is_embargoed_by = PREV } }
	NOT = { var:country_temp = { is_embargoing = PREV } }

	var:country_temp = {
		can_trade = yes
	}

	OR = {
		is_neighbor_of = var:country_temp
		AND = {
			can_trade_by_sea = yes
			var:country_temp = {
				can_trade_by_sea = yes
			}
		}
	}
}
has_trade_route_with = {
	#Checks if you already have a trade route with the country
	# resource_temp - resource token
	# country_temp - country to trade with
	# trade_type_temp - 1 = Import, -1 = Export

	any_of = {
		array = trade_route_country
		value = tr_country
		index = tr_index
		
		check_variable = { tr_country = country_temp }
		check_variable = { trade_route_resource^tr_index = resource_temp }
		check_variable = { trade_route_type^tr_index = trade_type_temp }
	}
}